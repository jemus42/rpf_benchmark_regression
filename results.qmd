---
title: "RPF Regression Benchmark Results"
author: "Lukas"
date: now
date-format: "YYYY-MM-DD HH:mm z"
date-modified: last-modified
lightbox: true
format: 
  html:
    code-fold: true
    fig-align: center
    toc: true
  pdf:
    documentclass: article
    fig-align: center
    toc: true
    date: now
    keep-tex: true
    knitr:
      opts_chunk:
        echo: false
        fig.pos: H
    include-in-header:
      - \usepackage{float}
editor_options: 
  chunk_output_type: console
---

```{r setup}
#| message: false
#| warning: false

library(ggplot2)
library(ragg)
library(data.table)
library(dplyr)
library(kableExtra)

jobs <- readRDS(fs::path(conf$result_path, "jobs", ext = "rds"))
jobs[, time.hours := as.numeric(time.running, unit = "hours")]

# Load task metadata
task_meta <- readRDS("task_meta.rds")

task_meta <- task_meta |>
  arrange(dim_rank) |>
  mutate(
    task_label = glue::glue("{task_id} ({n} x {p})"),
    task_label = factor(task_label, levels = task_label, ordered = TRUE),
    task_id = factor(task_id, levels = task_id, ordered = TRUE)
  )

# benchmark results
aggr   <- readRDS(fs::path(conf$result_path, "aggr",   ext = "rds"))
scores <- readRDS(fs::path(conf$result_path, "scores", ext = "rds"))
aggr   <- task_meta[aggr, on = c("task_id")]
scores <- task_meta[scores, on = c("task_id")]

archives_rpf <- readRDS(fs::path(conf$result_path, "archives_rpf", ext = "rds"))
results_rpf <- readRDS(fs::path(conf$result_path, "results_rpf", ext = "rds"))
archives_xgb <- readRDS(fs::path(conf$result_path, "archives_xgb", ext = "rds"))
archives_ranger <- readRDS(fs::path(conf$result_path, "archives_ranger", ext = "rds"))

# Define learner colors for somewhat identifiable plots
learner_cols <- c(
  "rpf" = "#F73098",
  "xgb" = "#3BA99C",
  "rpf_fixdepth" = "#CA1694",
  "xgb_fixdepth" = "#256A62",
  "ranger" = "#2171B5",
  "featureless" = "#484848"
)
learner_order <- names(learner_cols)
learner_label <- function(x) {
  x <- as.character(x)
  ret <- c("rpf" = "RPF", "xgb" = "XGBoost", "rpf_fixdepth" = "RPF (2)", "xgb_fixdepth" = "XGBoost (2)", "ranger" = "ranger", "featureless" = "Featureless")[x]
  unname(ret)
}

# aggr[, learner_label := learner_label(learner_id)]
# scores[, learner_label := learner_label(learner_id)]
aggr[, learner_id := factor(learner_id, levels = rev(learner_order))]
scores[, learner_id := factor(learner_id, levels = rev(learner_order))]

scores <- scores[dim <= 1e5]
aggr <- aggr[dim <= 1e5]


set.seed(3) # Only for jitterdodge consistency
```

## Benchmark Setup

-   Inner resampling: 2x3-fold repeated CV
-   Outer resampling: 10-fold CV using the same resampling folds as [the CTR-23 paper](https://openreview.net/pdf?id=HebAOoMm94). Some tasks use multiple repetitions.
-   Bayesian optimization with 200 evaluations
-   A runtime limit of 7 days for each outer resampling fold (including tuning)

### Status

The number of completed jobs per learner.

```{r job-status}
jobs[, .(done = sum(!is.na(time.running)), total = .N), by = .(learner_id)]  |>
  mutate(perc = scales::percent(done/total)) |>
  arrange(done) |>
  knitr::kable()

# jobs[, .(done = sum(!is.na(time.running)), total = .N), by = .(task_id, learner_id)]  |>
#   filter(done/total < 1) |>
#   mutate(perc = scales::percent(done/total)) |>
#   arrange(done) |>
#   knitr::kable()
```

```{r jobs-completion-history}
#| fig-width: 10
#| fig-height: 7
#| fig-align: center
jobs |>
  arrange(done) |>
  group_by(learner_id) |>
  mutate(
    cumdone = cumsum(!is.na(time.running)),
    cumdone_rel = cumdone/n()
  ) |>
  ungroup() |>
  filter(!is.na(time.running)) |>
  # mutate(
  #   time_rel = as.numeric(difftime(done, min(done), units = "days"))
  # ) |>
  #select(learner_id, done, time_rel)
  ggplot(aes(x = done, y = cumdone_rel, color = learner_id)) +
  geom_step(linewidth = 1.5, key_glyph = "rect") +
  scale_x_datetime(
    sec.axis = sec_axis(
      transform = \(x) as.numeric(difftime(x, min(x), units = "days")), 
      labels = as.numeric, 
      name = "Days since start"
    )
  ) +
  scale_y_continuous(labels = scales::label_percent()) +
  scale_color_manual(breaks = learner_order, values = learner_cols, labels = learner_label) +
  labs(
    title = "Regression Benchmark Completion Rate",
    subtitle = "Date of completion and days since benchmark start",
    x = "Time of Completion", y = "Completion Rate",
    color = NULL
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "bottom",
    plot.title.position = "plot"
  )
```

### Hyperparameter Search Spaces

#### RPF / RPF (2)

-   `ntrees` := 50
-   `max_interaction` in \[1, 20\]
    -   Via `max_interaction_ratio` in \[0, 1\] and `max_interaction_limit` := 20
    -   for **RPF (2)**: `max_interaction` := 2
-   `splits` in \[10, 100\]
-   `split_try` in \[1, 20\]
-   `t_try` in \[0.1, 1\]

#### ranger

-   `num.trees` := 500
-   `mtry.ratio` in \[0.1, 1\]
-   `min.node.size` in \[1, 50\]
-   `sample.fraction` in \[0.1, 1\]

#### XGBoost / XGBoost (2)

-   Preprocessing of categorical features using treatment encoding
-   `max_depth` in \[1, 20\]
    -   for **XGBoost (2)**: `max_depth` := 2
-   `subsample` in \[0.1, 1\]
-   `colsample_bytree` in \[0.1, 1\]
-   `eta` in \[0.0001, 1\] (log scale)
-   `nrounds` in \[10, 5000\]

| Learner | Parameter search space |
|----------------|-----------------------------------------------------------|
| RPF | `ntrees = 50`, `max_interaction` in \[1, 20\], `splits` in \[10, 100\], `split_try` in \[1, 20\], t_tryin \[0.1, 1\] \| |
| RPF (2) | Same as RPF, with `max_interaction = 2` |
| XGBoost | `max_depth` in \[1, 20\], `subsample` in \[0.1, 1\], `colsample_bytree` in \[0.1, 1\], `eta` in \[0.0001, 1\], `nrounds` in \[10, 5000\] |
| XGBoost (2) | Sames as XGBoost, with `max_depth = 2` |
| ranger | `num.trees` = 500, mtry.`ratio` in \[0.1, 1\], `min.node.size` in \[1, 50\], `sample.fraction` in \[0.1, 1\] |
| Featureless | Always predicts mean |

: Learners and search spaces

### Tasks

[OpenML CTR-23](https://www.openml.org/search?type=study&study_type=task&sort=tasks_included&id=353) tasks with:

-   No missing values
-   $n \cdot p \leq 10^5$
-   No features of type `logical` or `character`

```{r tasks}
task_meta |>
  arrange(dim) |>
  filter(n * p <= 1e5) |>
  select(task_id, n, p) |>
  kbl(
    caption = "Selected OpenML CTR-23 tasks, arranged by dimensionality",
    col.names = c("Task", "n", "p"),
    booktabs = TRUE#, format = "latex"
  ) |>
  kable_styling()
```

#### Completion by task

```{r}
jobs |>
  filter(learner_id != "featureless") |>
  mutate(is_done = !is.na(time.running)) |>
  summarize(
    perc_done = sum(is_done)/n(), 
    .by = c("task_id", "learner_id")
  ) |>
  tidyr::pivot_wider(id_cols = c("task_id"), names_from = "learner_id", values_from = "perc_done") |>
  mutate(
    total = (rpf + rpf_fixdepth + xgb + xgb_fixdepth + ranger)/5
  ) |>
  left_join(task_meta[, .(task_id, n, p)], by = "task_id") |>
  arrange(n * p) |>
  #filter(n * p <= 1e5) |>
  select(-n, -p) |>
  mutate(across(where(is.numeric), scales::percent)) |>
  left_join(task_meta, by = "task_id") |>
  select(task_id, n, p, rpf:total) |>
  kableExtra::kbl(caption = "Proportion of completed jobs by learner and task") |>
  kableExtra::kable_styling()
```

## Regression Benchmark Results

-   Tuning on Mean Squared Error (MSE)
-   Evaluation on
    -   Root Mean Square Error (RMSE)
    -   Root Relative Squared Error ([RRSE](https://mlr3measures.mlr-org.com/reference/rrse.html)), where 1 corresponds to the performance of the featureless learner and lower is better
    -   Median Absolute Error (MAE)

### Aggregated Results

```{r fun-plot_aggr}
plot_aggr <- function(xdf, 
                      measures = c("rmse", "mae", "rrse"),
                      include_featless = TRUE, logscale = FALSE, ncol = 2, outlier_threshold = 1e4) {
  
  xdf <- xdf |>
    tidyr::pivot_longer(
      cols = any_of(measures),
      names_to = "measure",
      values_to = "score"
    ) |>
    filter(!(measure == "rrse" & learner_id == "featureless")) |>
    mutate(
      measure = factor(measure, levels = c("rmse", "mae", "rrse"))
    )

  if (!include_featless) {
    xdf <- xdf |>
      filter(learner_id != "featureless")
  }
  
  if (!logscale) {
    num_outliers <- sum(xdf$score > outlier_threshold)
    xdf <- xdf |>
      filter(score < .env$outlier_threshold)
  }

  p <- xdf |>
    filter(.data$measure %in% .env$measures) |>
    ggplot(aes(y = learner_id, x = score, fill = learner_id)) +
    facet_wrap(vars(measure), ncol = ncol, scales = "free", labeller = \(x) lapply(x, toupper)) +
    geom_boxplot(alpha = .5) +
    geom_point(
      position = position_jitterdodge(dodge.width = .25),
      shape = 21
    ) +
    scale_y_discrete(labels = learner_label) +
    scale_fill_manual(values = learner_cols, guide = "none") +
    labs(
      #title = "Aggregated scores over all tasks",
      x = NULL, y = NULL
    ) +
    theme_minimal(base_size = 14) +
    theme(
      plot.title.position = "plot"
    )
  
  if (logscale) {
    p <- p + scale_x_log10(labels = scales::label_comma(accuracy = 0.01)) +
      labs(x = "Scores (log10)")
  } else {
    p <- p + scale_x_continuous(labels = scales::label_comma()) +
      labs(x = "Scores")
    
    if (!identical(measures, "rrse")) {
      p <- p + labs(caption = glue::glue("{num_outliers} outlier scores above {outlier_threshold} are omitted"))
    }
  }
  p
}
```

#### Boxplot

<!--
::: panel-tabset


##### Regular

```{r aggregated}
#| fig-width: 12
#| fig-height: 7
#| fig-align: center
# column: screen-inset-shaded

plot_aggr(aggr, include_featless = TRUE, logscale = FALSE, ncol = 1)
```

Without featureless learner

```{r aggregated-no-featless}
#| fig-width: 12
#| fig-height: 7
#| fig-align: center
# column: screen-inset-shaded

plot_aggr(aggr, include_featless = FALSE, logscale = FALSE, ncol = 1)
```

##### Log Scale

```{r aggregated-logscale}
#| fig-width: 12
#| fig-height: 7
#| fig-align: center
# column: screen-inset-shaded

plot_aggr(aggr, include_featless = TRUE, logscale = TRUE, ncol = 1)
```

Without featureless learner

```{r aggregated-logscale-no-featless}
#| fig-width: 12
#| fig-height: 7
#| fig-align: center
# column: screen-inset-shaded

plot_aggr(aggr, include_featless = FALSE, logscale = TRUE, ncol = 1)
```

##### Hybrid

-->

Mixed scales depending on measure

```{r aggregated-hybrid}
#| fig-width: 7
#| fig-height: 5
#| fig-align: center

library(patchwork)
# plot_aggr(aggr, measures = "rmse", include_featless = TRUE, logscale = TRUE, ncol = 1) /
#   plot_aggr(aggr, measures = "mae", include_featless = TRUE, logscale = TRUE, ncol = 1) /
#   plot_aggr(aggr, measures = "rrse", include_featless = FALSE, logscale = FALSE, ncol = 1)

xtemp <- aggr |>
    tidyr::pivot_longer(
      cols = any_of(c("rmse", "mae", "rrse")),
      names_to = "measure",
      values_to = "score",
      names_transform = toupper
    ) |>
    filter(!(measure == "RRSE" & learner_id == "featureless"))

p1 <- xtemp |>
    filter(measure == "RMSE") |>
    ggplot(aes(y = learner_id, x = score, fill = learner_id)) +
    geom_boxplot(alpha = .5) +
    geom_point(
      position = position_jitterdodge(dodge.width = .5),
      shape = 21, stroke = .1, size = 2
    ) +
    scale_x_log10(guide = guide_axis(position = "top"), labels = scales::label_comma(accuracy = 0.01)) +
    scale_y_discrete(labels = learner_label) +
    scale_fill_manual(values = learner_cols, guide = "none") +
    labs(
      #title = "Aggregated scores over all tasks",
      x = "RMSE (log10)", y = NULL
    ) +
    theme_minimal(base_size = 14) +
    theme(
      plot.title.position = "plot"
    )

p2 <- xtemp |>
    filter(measure == "MAE") |>
    ggplot(aes(y = learner_id, x = score, fill = learner_id)) +
    geom_boxplot(alpha = .5) +
    geom_point(
      position = position_jitterdodge(dodge.width = .5),
      shape = 21, stroke = .1, size = 2
    ) +
    scale_x_log10(guide = guide_axis(position = "top"), labels = scales::label_comma(accuracy = 0.01)) +
    scale_y_discrete(labels = learner_label) +
    scale_fill_manual(values = learner_cols, guide = "none") +
    labs(
      #title = "Aggregated scores over all tasks",
      x = "MAE (log10)", y = NULL
    ) +
    theme_minimal(base_size = 14) +
    theme(
      plot.title.position = "plot"
    )

p3 <- xtemp |>
    filter(measure == "RRSE") |>
    ggplot(aes(y = learner_id, x = score, fill = learner_id)) +
    geom_boxplot(alpha = .5) +
    geom_point(
      position = position_jitterdodge(dodge.width = .5),
      shape = 21, stroke = .1, size = 2
    ) +
    scale_x_continuous(guide = guide_axis(position = "top"), labels = scales::label_percent(accuracy = 1)) +
    scale_y_discrete(labels = learner_label) +
    scale_fill_manual(values = learner_cols, guide = "none") +
    labs(
      #title = "Aggregated scores over all tasks",
      x = "RRSE (%)", y = NULL
    ) +
    theme_minimal(base_size = 14) +
    theme(
      plot.title.position = "plot"
    )

p1 / p2 / p3
```

<!-- ::: -->

#### Table

<!--
```{r aggregated-table-meanmedian}
# column: screen-inset-shaded
aggr |>
  tidyr::pivot_longer(
    cols = any_of(c("rmse", "mae", "rrse")),
    names_to = "measure", names_transform = toupper,
    values_to = "score"
  ) |>
  group_by(learner_id, measure) |>
  summarize(
    mean = mean(score, na.rm = TRUE),
    median = median(score, na.rm = TRUE),
    sd = sd(score, na.rm = TRUE),
    q25 = quantile(score, .25, na.rm = TRUE),
    q75 = quantile(score, .75, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(across(where(is.numeric), \(x) round(x, 2))) |>
  mutate(
    mean = glue::glue("{mean} [{sd}]"),
    median = glue::glue("{median} [{q25}; {q75}]")
  ) |>
  select(-sd, -q25, -q75) |>
  tidyr::pivot_wider(names_from = measure, names_sep = "_", values_from = mean:median) |>
  select(learner_id, contains(toupper(c("rmse", "mae", "rrse")))) |>
  arrange(desc(learner_id)) |>
  mutate(learner_id = learner_label(learner_id)) |>
  kbl(
    col.names = c("Learner", rep(c("Mean [SD]", "Median [q25; q75]"), 3)),
    booktabs = TRUE
  ) |>
  kable_styling(full_width = TRUE, latex_options = c("HOLD_position")) |>
  add_header_above(header = c(" " = 1, "RMSE" = 2, "MAE" = 2, "RRSE" = 2)) |>
  column_spec(1, "2.5cm")
```
-->

```{r aggregated-table-median}
aggr |>
  mutate(rrse = 100 * rrse) |>
  tidyr::pivot_longer(
    cols = any_of(c("rmse", "mae", "rrse")),
    names_to = "measure", names_transform = toupper,
    values_to = "score"
  ) |>
  group_by(learner_id, measure) |>
  summarize(
    #mean = mean(score, na.rm = TRUE),
    median = median(score, na.rm = TRUE),
    #sd = sd(score, na.rm = TRUE),
    q25 = quantile(score, .25, na.rm = TRUE),
    q75 = quantile(score, .75, na.rm = TRUE),
    .groups = "drop"
  ) |>
  mutate(across(where(is.numeric), \(x) round(x, 2))) |>
  mutate(
    #mean = glue::glue("{mean} [{sd}]"),
    median = glue::glue("{median} [{q25}; {q75}]")
  ) |>
  select(-q25, -q75) |>
  tidyr::pivot_wider(names_from = measure, names_sep = "_", values_from = median) |>
  select(learner_id, contains(toupper(c("rmse", "mae", "rrse")))) |>
  arrange(desc(learner_id)) |>
  mutate(learner_id = learner_label(learner_id)) |>
  kbl(
    col.names = c("Learner", "RMSE", "MAE", "RRSE (%)"),
    caption = "Median [q25, q75] of scores over all datasets and outer resampling iterations",
    booktabs = TRUE,
  ) |>
  kable_styling(latex_options = c("hold_position"))
  # column_spec(1, "2.5cm")
```

### Results per Task

```{r fun-plot_scores}
plot_scores <- function(xdf, measure = "rmse", include_featless = TRUE, logscale = FALSE, ncol = 3) {
  xdf <- xdf |>
    tidyr::pivot_longer(
      cols = any_of(c("rmse", "mae", "rrse")),
      names_to = "measure", names_transform = toupper,
      values_to = "score"
    ) |>
    filter(.data$measure == toupper(.env$measure))
  
  if (!include_featless) {
    xdf <- xdf |>
      filter(learner_id != "featureless")
  }
  
  if (measure == "rrse") {
    xdf <- xdf |>
      filter(learner_id != "featureless")
  }
  
  p <- xdf |>
    mutate(
      task_label = stringr::str_replace(task_label, "\\s\\(", "\\\n("),
      task_label = reorder(task_label, n*p)
      #task_label = stringr::str_wrap(task_label, width = 20, whitespace_only = FALSE)
    ) |>
    ggplot(aes(y = learner_id, x = score, fill = learner_id, color = learner_id)) +
    facet_wrap(vars(task_label), ncol = ncol, scales = "free") +
    geom_boxplot(alpha = .5) +
    geom_jitter(shape = 21, stroke = .5, alpha = .15, size = 1) +
    scale_fill_manual(values = learner_cols, guide = "none", aesthetics = c("color", "fill")) +
    scale_y_discrete(labels = learner_label) +
    labs(
      # title = "Scores per task",
      # subtitle = "Tasks ordered by n * p, decreasing",
      y = NULL, x = toupper(measure)
    ) +
    theme_minimal(base_size = 13) +
    theme(
      panel.spacing.x = unit(1, "cm"),
      plot.title.position = "plot"
    )
  
  if (logscale) {
    p + scale_x_log10(labels = scales::label_comma(accuracy = 0.01))
  } else {
    p + scale_x_continuous(labels = scales::label_comma())
  }
}
```

Tasks ordered by $n \cdot p$, decreasing.

::: panel-tabset
#### RMSE

```{r per-task-rmse}
#| fig-width: 8.5
#| fig-height: 8
#| fig-align: center
#| message: false
#| error: false
# column: screen-inset-shaded

plot_scores(scores, "rmse", include_featless = TRUE, logscale = FALSE)
```


#### MAE

```{r per-task-mae}
#| fig-width: 10
#| fig-height: 8.5
#| fig-align: center
#| message: false
#| error: false
# column: screen-inset-shaded

plot_scores(scores, "mae", include_featless = TRUE, logscale = FALSE)
```

#### RRSE

```{r per-task-rrse-no-featless}
#| fig-width: 10
#| fig-height: 8.5
#| fig-align: center
#| message: false
#| error: false
# column: screen-inset-shaded

plot_scores(scores, "rrse", include_featless = FALSE, logscale = FALSE)
```
:::

#### Runtime vs Performance

```{r scores-runtime-rrse}
#| fig-width: 10
#| fig-height: 8.5
#| fig-align: center
#|
scores_runtime <- inner_join(
  scores,
  jobs[dim <= 1e5, .(task_id, learner_id, repl, time.hours)],
  by = c("task_id", "learner_id", "iteration" = "repl")
) |>
  filter(learner_id != "featureless")

scores_runtime |>
  ggplot(aes(x = time.hours, y = rrse, color = learner_id, fill = learner_id)) +
  facet_wrap(vars(task_label), scales = "free", ncol = 3) +
  geom_point(alpha = .5, key_glyph = "rect") +
  scale_x_log10() +
  scale_y_continuous(labels = scales::label_percent()) +
  scale_color_manual(
    values = learner_cols, 
    labels = learner_label, 
    breaks = learner_order,
    aesthetics = c("color", "fill")) +
  labs(
    y = "RRSE (%)", x = "Runtime (hours, log10)",
    color = NULL, fill = NULL
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "bottom"
  )
```

```{r}
lm(log(time.hours) ~ n:p + learner_id, data = scores_runtime) |>
  broom::tidy(exponentiate = TRUE, conf.int = TRUE)

scores_runtime |>
  summarize(
    mean = mean(time.hours), 
    median = median(time.hours), 
    sd = sd(time.hours), 
    .by = "learner_id"
  )
```



### Tuning Results

```{r fun-plot_archive}
plot_archive <- function(xdf, param, log_y = FALSE, log_x = FALSE, outlier_threshold_percentile = 0.9) {
  
  p <- xdf |>
    filter(rmse <= quantile(rmse, probs = outlier_threshold_percentile), .by = "task_id") |>
    filter(dim <= 1e5) |>
    mutate(task_label = reorder(task_label, dim)) |>
    ggplot(aes(x = .data[[param]], y = rmse, color = learner_id, fill = learner_id)) +
    facet_wrap(vars(task_label), scales = "free", ncol = 3) +
    geom_point(size = 2, alpha = .1, shape = 21, key_glyph = "rect") +
    geom_smooth(se = FALSE, show.legend = FALSE, method = "lm") +
    scale_color_brewer(palette = "Dark2", labels = learner_label, aesthetics = c("color", "fill")) +
    guides(fill = guide_legend(override.aes = list(alpha = .8))) +
    labs(
      title = glue::glue("Tuning results for param `{param}`"),
      subtitle = "Result of up to 200 evaluations of Bayesian optimization",
      y = "RMSE", color = NULL, fill = NULL,
      caption = glue::glue("Removed outliers above {scales::ordinal(100 * outlier_threshold_percentile)} percentile")
    ) +
    theme_minimal() +
    theme(
      panel.spacing.x = unit(5, "mm"),
      plot.title.position = "plot"
    )
  
  if (log_x) {
    p <- p + scale_x_log10(labels = scales::label_comma())
  } else {
    p <- p + scale_x_continuous(breaks = scales::pretty_breaks(), labels = scales::label_comma())
  }
  
  if (log_y) {
    p <- p + scale_y_log10(labels = scales::label_comma())
  } else {
    p <- p + scale_y_continuous(labels = scales::label_comma())
  }
  
  if (length(unique(xdf$learner_id)) == 1) {
    p + theme(legend.position = "none")
  } else {
    p + theme(legend.position = "top")
  }
}
```

Showing only the best performing parameter combinations of the inner folds, e.g. the parameters that "won".
One plot per hyperparameter, with performance on y-axis.

Note that `max_interaction` is tuned by tuning `max_interaction_ratio` within \[0, 1\] and then calculating

$$\max(\lceil \mathtt{max\_interaction\_ratio} \cdot \min(p, 20)\rceil, 1)$$

to effectively tune `max_interaction` within 1 and $p$ or 20, whichever is lower.
This is not ideal since multiple values for `max_interaction_ratio` could result in the same value for `max_interaction` for small $p$, but it's a compromise.

```{r tuning-results}
#| fig-width: 12
#| fig-height: 7
#| fig-align: center
#| message: false
#| error: false
#| warning: false
# column: screen-inset-shaded

plot_archive(results_rpf, "splits")
plot_archive(results_rpf, "split_try")
plot_archive(results_rpf, "t_try")
plot_archive(results_rpf, "max_interaction")
```

### Tuning Archives

Showing all evaluated hyperparameter configurations to get an impression of the space the MBO algorithm explored.

#### RPF / RPF (2)

```{r tuning-archives-rpf}
#| fig-width: 12
#| fig-height: 7
#| fig-align: center
#| message: false
#| error: false
#| warning: false
#| cache: true
# column: screen-inset-shaded

plot_archive(archives_rpf, "splits")
plot_archive(archives_rpf, "split_try")
plot_archive(archives_rpf, "t_try")
plot_archive(archives_rpf, "max_interaction")
```

#### XGBoost / XGBoost (2)

```{r tuning-archives-xgb}
#| fig-width: 12
#| fig-height: 7
#| fig-align: center
#| message: false
#| error: false
#| warning: false
#| cache: true
# column: screen-inset-shaded

plot_archive(archives_xgb, "max_depth"       , log_y = FALSE, log_x = FALSE)
plot_archive(archives_xgb, "subsample"       , log_y = FALSE, log_x = FALSE)
plot_archive(archives_xgb, "colsample_bytree", log_y = FALSE, log_x = FALSE)
plot_archive(archives_xgb, "eta"             , log_y = FALSE, log_x = FALSE)
plot_archive(archives_xgb, "nrounds"         , log_y = FALSE, log_x = FALSE)
```

#### ranger

```{r tuning-archives-ranger}
#| fig-width: 12
#| fig-height: 7
#| fig-align: center
#| message: false
#| error: false
#| warning: false
#| cache: true
# column: screen-inset-shaded

plot_archive(archives_ranger, "mtry"           , log_y = FALSE, log_x = FALSE)
plot_archive(archives_ranger, "min.node.size"  , log_y = FALSE, log_x = FALSE)
plot_archive(archives_ranger, "sample.fraction", log_y = FALSE, log_x = FALSE)

```

## Citation

```{r citation}
packages <- c("mlr3", "mlr3learners", "mlr3extralearners", "mlr3mbo", "randomPlantedForest", "xgboost", "ranger", "batchtools")

knitr::write_bib(x = packages, prefix = "pkg-", file = "packages.bib")

sapply(packages, \(x) {
  sprintf("\\emph{%s} v%s \\cite{pkg-%s}", x, packageVersion(x), x)
}) |>
  paste(collapse = ", ") |>
  cat()
```
